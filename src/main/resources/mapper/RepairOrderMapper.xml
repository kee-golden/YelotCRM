<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yelot.crm.mapper.RepairOrderMapper">
    <resultMap id="orderResultMap" type="com.yelot.crm.entity.RepairOrder">
        <id property="id" column="id"/>
        <result property="orderNo" column="order_no"/>
        <result property="status" column="status"/>
        <result property="createUserId" column="create_user_id"/>
        <result property="createUserName" column="create_user_name"/>
        <result property="pickupAt" column="pickup_at"/>
        <result property="pickupType" column="pickup_type"/>
        <result property="customerId" column="customer_id"/>
        <result property="customerName" column="customer_name"/>
        <result property="customerPhone" column="customer_phone"/>
        <result property="customerPhoneSecond" column="customer_phone_second"/>
        <result property="customerAddress" column="customer_address"/>
        <result property="advancePayment" column="advance_payment"/>
        <result property="nonPayment" column="non_payment"/>
        <result property="advancePaymentType" column="advance_payment_type"/>
        <result property="nonPaymentType" column="non_payment_type"/>
        <result property="totalPayment" column="total_payment"/>
        <result property="shopId" column="shop_id"/>
        <result property="shopName" column="shop_name"/>
        <result property="imagesJson" column="images_json"/>
        <result property="productInfoJson" column="product_info_json"/>
        <result property="serviceItemIds" column="service_item_ids"/>
        <result property="imageDesc" column="image_desc"/>
        <result property="firstCategoryId" column="first_category_id"/>
        <result property="secondCategoryId" column="second_category_id"/>
        <result property="categoryName" column="category_name"/>
        <result property="firstCategoryName" column="first_category_name"/>
        <result property="secondCategoryName" column="second_category_name"/>
        <result property="brandId" column="brand_id"/>
        <result property="brandName" column="brand_name"/>
        <result property="repairDesc" column="repair_desc"/>
        <result property="createAt" column="create_at"/>
        <result property="updateAt" column="update_at"/>
        <result property="precheckImages" column="precheck_images"/>
        <result property="qccheckImages" column="qccheck_images"/>
        <result property="typeName" column="type_name"/>
        <result property="labourPayment" column="labour_payment"/>
        <result property="materialPayment" column="material_payment"/>
        <result property="discountAmountPayment" column="discount_amount_payment"/>
        <result property="consultOrderId" column="consult_order_id"/>
        <result property="consultOrderNo" column="consult_order_no"/>
        <result property="shopAddress" column="shop_address"/>
        <result property="shopPhone" column="shop_phone"/>
        <result property="discountDesc" column="discount_desc"/>
        <result property="refOrderIds" column="ref_order_ids"/>
    </resultMap>
    
    <resultMap id="monthData" type="com.yelot.crm.entity.MonthData">
        <result property="month" column="month"/>
        <result property="number" column="number"/>
    </resultMap>
    
    <select id="find" resultMap="orderResultMap">
        SELECT * from t_repair_order where id = #{id};
    </select>

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into t_repair_order(order_no,status,create_user_id,pickup_at,
            pickup_type,customer_id,customer_name,customer_phone,customer_phone_second,customer_address,advance_payment,non_payment,
            advance_payment_type,non_payment_type,total_payment,shop_id,images_json,image_desc,product_info_json,
            service_item_ids,first_category_id,second_category_id,brand_id,repair_desc,create_at,update_at,
            type_name,labour_payment,material_payment,discount_amount_payment,consult_order_id,discount_desc,ref_order_ids,channel_source)
            values(#{orderNo},#{status},#{createUserId},#{pickupAt},#{pickupType},
            #{customerId},#{customerName},#{customerPhone},#{customerPhoneSecond},#{customerAddress},#{advancePayment},#{nonPayment},
            #{advancePaymentType},#{nonPaymentType},#{totalPayment},#{shopId},#{imagesJson},#{imageDesc},#{productInfoJson},
            #{serviceItemIds},#{firstCategoryId},#{secondCategoryId},#{brandId},#{repairDesc},#{createAt},#{updateAt},
            #{typeName},#{labourPayment},#{materialPayment},#{discountAmountPayment},#{consultOrderId},#{discountDesc},#{refOrderIds},#{channelSource})
    </insert>

    <update id="updateOrderStatusAndImagesPath">
        update t_repair_order set status = #{approveStatus}
        <if test="approveStatus == 16 or approveStatus == 18">
        , precheck_images = #{imagesPath}
        </if>
        <if test="approveStatus == 20 or approveStatus == 22">
            , qccheck_images = #{imagesPath}
        </if>
        <if test="repairUserId != null and repairUserId != ''">
            , repair_user_id = #{repairUserId}
        </if>
        <if test="repairLastAt != null and repairLastAt != ''">
            , repair_last_at = #{repairLastAt}
        </if>
        <if test="approveStatus == 36">
        , labour_payment = #{labourPayment}, 
        material_payment = #{materialPayment}, 
        discount_amount_payment = #{discountAmountPayment}, 
        total_payment= #{totalPayment},
        discount_desc = #{discountDesc},
        non_payment_type = #{nonPaymentType}
        </if>
         where id = #{orderId}

    </update>

    <select id="countTotalPage" resultType="java.lang.Integer">
        select count(*) 
        from t_repair_order 
        where 1 = 1 
        <if test="create_user_id != null and create_user_id != ''">and create_user_id = #{create_user_id}</if>
        <if test="three_days_after != null and three_days_after != ''">and pickup_at &lt;= #{three_days_after} and status != '0' and status != '40'</if>
        <if test="extra_search != null and extra_search != '' and type != 'centerAll' and type != 'centerWarn'">
            and (order_no like CONCAT('%', #{extra_search}, '%') or customer_phone like CONCAT('%', #{extra_search}, '%'))
        </if>
        <if test="extra_search != null and extra_search != '' and (type == 'centerAll' or type == 'centerWarn')">
            and order_no like CONCAT('%', #{extra_search}, '%')
        </if>
    </select>
    
    <select id="findByPage" resultMap="orderResultMap">
        select t.*, t1.realname create_user_name, t2.name shop_name, concat(t3.name,"->",t4.name) category_name, t5.order_no consult_order_no
        from t_repair_order t
        left join t_user t1 on t.create_user_id = t1.id
        left join t_shop t2 on t.shop_id = t2.id
        left join t_category t3 on t.first_category_id = t3.id
        left join t_category t4 on t.second_category_id = t4.id
        left join t_consult_order t5 on t.consult_order_id = t5.id
        where 1 = 1
        <if test="create_user_id != null and create_user_id != ''">and t.create_user_id = #{create_user_id}</if>
        <if test="three_days_after != null and three_days_after != ''">and t.pickup_at &lt;= #{three_days_after} and t.status != '0' and t.status != '40'</if>
        <if test="extra_search != null and extra_search != '' and type != 'centerAll' and type != 'centerWarn'">
            and (t.order_no like CONCAT('%', #{extra_search}, '%') or t.customer_phone like CONCAT('%', #{extra_search}, '%'))
        </if>
        <if test="extra_search != null and extra_search != '' and (type == 'centerAll' or type == 'centerWarn')">
            and t.order_no like CONCAT('%', #{extra_search}, '%')
        </if>
        order by t.id desc 
        limit #{pageHelper.offset},#{pageHelper.size} 
    </select>

    <select id="findServiceItemName" resultType="String">
        SELECT name from t_service_item where id = #{id};
    </select>

    <select id="countTotalPageCheckList" resultType="java.lang.Integer">
        select count(*)
        from t_repair_order
        where 1 = 1
        <if test="statusList != null">
            and status in <foreach item="item" index="index" collection="statusList" open="(" separator="," close=")">
            #{item}
           </foreach>
        </if>
        <if test="extra_search != null and extra_search != '' and type != 'centerCheck'">
            and (order_no like CONCAT('%', #{extra_search}, '%') or customer_phone like CONCAT('%', #{extra_search}, '%'))
        </if>
        <if test="extra_search != null and extra_search != '' and type == 'centerCheck'">
            and order_no like CONCAT('%', #{extra_search}, '%')
        </if>
    </select>

    <select id="findByPageCheckList" resultMap="orderResultMap">
        select t.*, t1.realname create_user_name, t2.name shop_name, concat(t3.name,"->",t4.name) category_name, t5.order_no consult_order_no
        from t_repair_order t
        left join t_user t1 on t.create_user_id = t1.id
        left join t_shop t2 on t.shop_id = t2.id
        left join t_category t3 on t.first_category_id = t3.id
        left join t_category t4 on t.second_category_id = t4.id
        left join t_consult_order t5 on t.consult_order_id = t5.id
        where 1 = 1
        <if test="statusList != null">
            and t.status in <foreach item="item" index="index" collection="statusList" open="(" separator="," close=")">
            #{item}
        </foreach>
        </if>
        <if test="extra_search != null and extra_search != '' and type != 'centerCheck'">
            and (t.order_no like CONCAT('%', #{extra_search}, '%') or t.customer_phone like CONCAT('%', #{extra_search}, '%'))
        </if>
        <if test="extra_search != null and extra_search != ''  and type == 'centerCheck'">
            and t.order_no like CONCAT('%', #{extra_search}, '%')
        </if>
        order by t.id desc
        limit #{pageHelper.offset},#{pageHelper.size}
    </select>

    <select id="countTotalPageCheckListAndShop" resultType="java.lang.Integer">
        select count(*)
        from t_repair_order
        where 1 = 1
        <if test="statusList != null">
            and status in <foreach item="item" index="index" collection="statusList" open="(" separator="," close=")">
            #{item}
            </foreach>
        </if>
        <if test="extra_search != null and extra_search != '' and type != 'centerCheck'">
            and (order_no like CONCAT('%', #{extra_search}, '%') or t.customer_phone like CONCAT('%', #{extra_search}, '%'))
        </if>
        <if test="extra_search != null and extra_search != '' and type == 'centerCheck'">
            and order_no like CONCAT('%', #{extra_search}, '%')
        </if>
        <if test="shopId != null and shopId != ''">and shop_id =  #{shopId}</if>
    </select>

    <select id="findByPageCheckListAndShop" resultMap="orderResultMap">
        select t.*, t1.realname create_user_name, t2.name shop_name, concat(t3.name,"->",t4.name) category_name, t5.order_no consult_order_no
        from t_repair_order t
        left join t_user t1 on t.create_user_id = t1.id
        left join t_shop t2 on t.shop_id = t2.id
        left join t_category t3 on t.first_category_id = t3.id
        left join t_category t4 on t.second_category_id = t4.id
        left join t_consult_order t5 on t.consult_order_id = t5.id
        where 1 = 1
        <if test="statusList != null">
            and t.status in
            <foreach item="item" index="index" collection="statusList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="extra_search != null and extra_search != '' and type != 'centerCheck'">
            and (t.order_no like CONCAT('%', #{extra_search}, '%') or t.customer_phone like CONCAT('%', #{extra_search}, '%'))
        </if>
        <if test="extra_search != null and extra_search != '' and type == 'centerCheck'">
            and t.order_no like CONCAT('%', #{extra_search}, '%')
        </if>
        <if test="shopId != null and shopId != ''">and t.shop_id =  #{shopId}</if>
        order by t.id desc
        limit #{pageHelper.offset},#{pageHelper.size}
    </select>

    <select id="findRepairOrderByOrderId" resultMap="orderResultMap">
        select t.*, t1.realname create_user_name, t2.name first_category_name, t3.name second_category_name, t4.name brand_name, t5.address shop_address, t5.phone shop_phone
        from t_repair_order t
        left join t_user t1 on t.create_user_id = t1.id
        left join t_category t2 on t.first_category_id = t2.id
        left join t_category t3 on t.second_category_id = t3.id
        left join t_brand t4 on t.brand_id = t4.id
        left join t_shop t5 on t.shop_id = t5.id
        where t.id = #{orderId}
    </select>

    <select id="findRepairOrderByOrderNo" resultMap="orderResultMap">
        select t.*, t1.realname create_user_name, t2.name first_category_name, t3.name second_category_name, t4.name brand_name, t5.address shop_address, t5.phone shop_phone
        from t_repair_order t
        left join t_user t1 on t.create_user_id = t1.id
        left join t_category t2 on t.first_category_id = t2.id
        left join t_category t3 on t.second_category_id = t3.id
        left join t_brand t4 on t.brand_id = t4.id
        left join t_shop t5 on t.shop_id = t5.id
        where t.order_no = #{orderNo}
    </select>

    <!-- 获取一个门店今天的总订单数 -->
    <select id="countByShopId" resultType="Integer">
        select count(*) from t_repair_order where to_days(create_at) = to_days(now()) and shop_id = #{shopId};
    </select>

    <!-- 编辑

    customerId: customerId,
                firstCategory: firstCategory,
                secondCategory: secondCategory,
                brandId: brandId,
                valuesAttributeJson: JSON.stringify(valuesAttributeJson),
                serviceItemJson: JSON.stringify(serviceItemJson),
                imagePaths: imagePaths,
                imageDesc: imageDesc,
                repairDesc: repairDesc,
                typeName: typeName,
                advancePayment: advancePayment,
                labourPayment: labourPayment,
                materialPayment: materialPayment,
                pickupDate: pickupDate
    -->
    <update id="update">
        update t_repair_order set update_at = now()
        <if test="customerId != null">,customer_id = #{customerId}</if>
        <if test="firstCategoryId != null">,first_category_id = #{firstCategoryId}</if>
        <if test="secondCategoryId != null">,second_category_id = #{secondCategoryId}</if>
        <if test="productInfoJson != null">,product_info_json = #{productInfoJson}</if>
        <if test="serviceItemIds != null">,service_item_ids = #{serviceItemIds}</if>
        <if test="imagesJson != null">,images_json = #{imagesJson}</if>
        <if test="imageDesc != null">,image_desc = #{imageDesc}</if>
        <if test="repairDesc != null">,repair_desc = #{repairDesc}</if>
        <if test="typeName != null">,type_name = #{typeName}</if>
        <if test="advancePayment != null">,advance_payment = #{advancePayment}</if>
        <if test="labourPayment != null">,labour_payment = #{labourPayment}</if>
        <if test="materialPayment != null">,material_payment = #{materialPayment}</if>
        <if test="pickupAt != null">,pickup_at = #{pickupAt}</if>
		where id = #{id}
    </update>
    
    <update id="updateRefOrderIdsByOrderNo">
        update t_repair_order set ref_order_ids = #{refOrderIds}
		where order_no = #{orderNo}
    </update>
    
    <select id="findByMonth" resultMap="monthData">
        select month(create_at) month,sum(total_payment) number from t_repair_order where YEAR(create_at) = YEAR(now())
         <if test="userId != null and userId != ''">
             and create_user_id = #{userId}
         </if>
        <if test="firstCategoryId != null and firstCategoryId != ''">
           AND first_category_id = #{firstCategoryId}
        </if>
        <if test="shopId != null and shopId != ''">
            AND shop_id = #{shopId}
        </if>
         group by MONTH(create_at)
    </select>

    <update id="updateTypeName">
        update t_repair_order set type_name = #{typeName} where id = #{id}
    </update>
    
    <select id="findUserOrderNoByPhone" resultMap="orderResultMap">
        select t.*
        from t_repair_order t
        where t.customer_phone = #{phone} and DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= t.create_at
        order by t.create_at desc
    </select>

    <select id="findRefOrderIdsByOrderNo" resultMap="orderResultMap">
        select *
        from t_repair_order
        where order_no = #{orderNo}
    </select>

    <update id="updateExpressByOrderNo">
        update t_repair_order set express_id = #{expressId}, express_money = #{expressMoney} where order_no = #{orderNo}
    </update>
</mapper>